<?php

namespace AppBundle\Entity;

use AppBundle\Util\QueryHelper;
use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    use QueryHelper;

    public function findActiveCount($team = -1)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $query = $qb->select('count(u)')
            ->from('AppBundle:User', 'u')
            ->where('u.active = true');
        if($team >= 0)
        {
            $query = $query->andWhere('u.team = :team')
                ->setParameter('team', $team);
        }

        $query = $query->getQuery();
        return $query->getSingleScalarResult();
    }

    public function findActiveNormalCount()
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $query = $qb->select('count(u)')
            ->from('AppBundle:User', 'u')
            ->where('u.active = true')
            ->andWhere('u.roles LIKE :roles')
            ->addOrderBy('u.team', 'DESC')
            ->addOrderBy('u.humansTagged', 'DESC')
            ->setParameter('roles', '%ROLE_USER%')
            ->getQuery();

        return $query->getSingleScalarResult();
    }

    public function findActiveOrderedByNumberTaggedAndTeam($page, $maxPerPage = 10)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $query = $qb->select('u')
            ->from('AppBundle:User', 'u')
            ->where('u.active = true')
            ->andWhere('u.roles LIKE :roles')
            ->addOrderBy('u.team', 'DESC')
            ->addOrderBy('u.humansTagged', 'DESC')
            ->setParameter('roles', '%ROLE_USER%')
            ->getQuery()
            ->setMaxResults($maxPerPage)
            ->setFirstResult($page * $maxPerPage);

        return $query->getResult();
    }

    public function findActiveOrderedByClan($page, $maxPerPage = 10)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $query = $qb->select('u, u.clan as HIDDEN tmpClan')
            ->from('AppBundle:User', 'u')
            ->where('u.active = true')
            ->andWhere('u.clan is not NULL')
            ->andWhere('u.clan != :empty')
            ->orderBy('tmpClan', 'ASC')
            ->setParameter('empty', '')
            ->getQuery()
            ->setMaxResults($maxPerPage)
            ->setFirstResult($page * $maxPerPage);

        return $query->getResult();
    }

    public function findActiveWithClanCount()
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $query = $qb->select('count(u)')
            ->from('AppBundle:User', 'u')
            ->where('u.active = true')
            ->andWhere('u.clan is not NULL')
            ->andWhere('u.clan != :empty')
            ->setParameter('empty', '')
            ->getQuery();

        return $query->getSingleScalarResult();
    }

    public function findActiveMods($page, $maxPerPage = 10)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $query = $qb->select('u')
            ->from('AppBundle:User', 'u')
            ->where('u.active = true')
            ->andWhere($qb->expr()->orx(
                'u.roles LIKE :admin',
                'u.roles LIKE :mod'
            ))
            ->setParameter('admin', '%ROLE_ADMIN%')
            ->setParameter('mod', '%ROLE_MOD%')
            ->getQuery()
            ->setMaxResults($maxPerPage)
            ->setFirstResult($page * $maxPerPage);

        return $query->getResult();
    }

    public function findActiveModsCount()
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $query = $qb->select('count(u)')
            ->from('AppBundle:User', 'u')
            ->where('u.active = true')
            ->andWhere($qb->expr()->orx(
                'u.roles LIKE :admin',
                'u.roles LIKE :mod'
            ))
            ->setParameter('admin', '%ROLE_ADMIN%')
            ->setParameter('mod', '%ROLE_MOD%')
            ->getQuery();

        return $query->getSingleScalarResult();
    }

    public function findAllByPage($page, $maxPerPage = 10)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $query = $qb->select('u')
            ->from('AppBundle:User', 'u')
            ->orderBy('u.signupDate', 'ASC')
            ->getQuery()
            ->setMaxResults($maxPerPage)
            ->setFirstResult($page * $maxPerPage);

        return $query->getResult();
    }

    public function findCount()
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $query = $qb->select('count(u)')
            ->from('AppBundle:User', 'u')
            ->getQuery();

        return $query->getSingleScalarResult();
    }

    public function findInSearchableFields($term, $onlyActive = true, $email = false)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $or = null;
        if(!$email)
        {
            $or = $qb->expr()->orx(
                "u.fullname LIKE :term ESCAPE '!'",
                "u.clan LIKE :term ESCAPE '!'"
            );
        }
        else
        {
            $or = $qb->expr()->orx(
                "u.fullname LIKE :term ESCAPE '!'",
                "u.clan LIKE :term ESCAPE '!'",
                "u.email LIKE :term ESCAPE '!'"
            );
        }

        $query = $qb->select('u')
            ->from('AppBundle:User', 'u')
            ->where($or)
            ->setParameter('term', $this->makeLikeParam($term));

        if($onlyActive)
        {
            $query = $query->andWhere("u.active = true");
        }

        $query = $query->getQuery();

        return $query->getResult();
    }
}
